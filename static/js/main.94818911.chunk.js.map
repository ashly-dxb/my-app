{"version":3,"sources":["ContactPage.js","App.js","registerServiceWorker.js","index.js"],"names":["ContactPage","Component","HomePage","LocationPage","App","className","style","color","to","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8RAwBeA,E,4JArBX,WACE,OACQ,6BACE,4CACA,6BACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,kD,GAhBUC,aCUpBC,EAAW,kBAAM,0CAEjBC,EAAe,kBAAM,8CA4BZC,E,4JAzBb,WACE,OACC,yBAAKC,UAAU,OAChB,4BAAQA,UAAU,cACjB,6CAGD,kBAAC,IAAD,KACC,yBAAKC,MAAQ,CAACC,MAAO,QACpB,kBAAC,IAAD,CAAMF,UAAU,OAAOG,GAAG,SAA1B,QACA,kBAAC,IAAD,CAAMH,UAAU,OAAOG,GAAG,YAA1B,WACA,kBAAC,IAAD,CAAMH,UAAU,OAAOG,GAAG,aAA1B,YAEA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWR,IAC/B,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWV,IAClC,kBAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWP,Y,GAjBxBF,aCNZU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MC7DjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDWlC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,UAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,UAAN,sBAEP5B,EAwCV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEA5DAoB,CAAwBjC,GAGxBD,EAAgBC,OC5BxBkC,K","file":"static/js/main.94818911.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ContactPage extends Component {\r\n    render() {\r\n      return (\r\n              <div>\r\n                <h1>Contact Page</h1>\r\n                <br />\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n                <div>Page content</div>\r\n              </div>\r\n            );\r\n    }\r\n}\r\n  \r\nexport default ContactPage;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport {\n\tBrowserRouter as Router,\n\tRoute,\n\tSwitch,\n\tLink\n} from 'react-router-dom';\n\nimport ContactPage from './ContactPage';\n\nconst HomePage = () => <h1>Home Page</h1>;\n//const ContactPage = () => <h1>Contact Page</h1>;\nconst LocationPage = () => <h1>Location Page</h1>;\n\nclass App extends Component {\n  render() {\n    return (\n\t\t\t  <div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>React Router</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<Router>\n\t\t\t\t\t<div style={ {color: 'red'} }>\n\t\t\t\t\t\t<Link className=\"Link\" to='/home'>Home</Link>\t\t\t\t\t\t\n\t\t\t\t\t\t<Link className=\"Link\" to='/contact'>Contact</Link>\n\t\t\t\t\t\t<Link className=\"Link\" to='/location'>Location</Link>\n\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/home\" component={HomePage} />\n\t\t\t\t\t\t\t<Route path=\"/contact\" component={ContactPage} />\n\t\t\t\t\t\t\t<Route path=\"/location\" component={LocationPage} />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n\t\t\t  </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n//import Hello from './Hello.js';\n//ReactDOM.render(<Hello />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}